AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Elasticache Redis vs Valkey 性能比較用環境'

Parameters:
  EC2InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
    Description: EC2 instance type for the benchmark client
    
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet in the first Availability Zone
    
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the public subnet in the second Availability Zone

  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance

  RedisNodeType:
    Type: String
    Default: cache.m5.large
    AllowedValues:
      - cache.t3.micro
      - cache.t3.small
      - cache.t3.medium
      - cache.m5.large
      - cache.m5.xlarge
      - cache.m5.2xlarge
      - cache.r5.large
      - cache.r5.xlarge
    Description: ElastiCache node type for Redis and Valkey clusters

  RedisEngineVersion:
    Type: String
    Default: '7.1'
    AllowedValues:
      - '6.2'
      - '7.1'
    Description: Redis engine version

  ValkeyEngineVersion:
    Type: String
    Default: '8.0'
    AllowedValues:
      - '7.2'
      - '8.0'
    Description: Valkey engine version

Resources:
  # VPC and Network Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: elasticache-benchmark-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: elasticache-benchmark-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: elasticache-benchmark-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: elasticache-benchmark-public-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: elasticache-benchmark-public-rt

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Group for ElastiCache
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Redis and Valkey clusters
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref BenchmarkClientSecurityGroup
      Tags:
        - Key: Name
          Value: elasticache-benchmark-sg

  # Security Group for Benchmark Client EC2 Instance
  BenchmarkClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the benchmark client EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: benchmark-client-sg

  # ElastiCache Subnet Group
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache Redis and Valkey clusters
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # ElastiCache Redis Cluster
  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      Engine: redis
      EngineVersion: !Ref RedisEngineVersion
      CacheNodeType: !Ref RedisNodeType
      NumCacheClusters: 1
      ReplicationGroupDescription: "Redis benchmark cluster"
      SecurityGroupIds:
        - !GetAtt ElastiCacheSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      AutomaticFailoverEnabled: false
      MultiAZEnabled: false
      Tags:
        - Key: Name
          Value: redis-benchmark-cluster

  # ElastiCache Valkey Cluster
  ValkeyCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      Engine: valkey
      EngineVersion: !Ref ValkeyEngineVersion
      CacheNodeType: !Ref RedisNodeType
      NumCacheClusters: 1
      ReplicationGroupDescription: "Valkey benchmark cluster"
      SecurityGroupIds:
        - !GetAtt ElastiCacheSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      AutomaticFailoverEnabled: false
      MultiAZEnabled: false
      TransitEncryptionEnabled: false
      Tags:
        - Key: Name
          Value: valkey-benchmark-cluster

  # IAM Role for EC2 Instance
  BenchmarkClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess
      Tags:
        - Key: Name
          Value: benchmark-client-role

  # IAM Instance Profile
  BenchmarkClientInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BenchmarkClientRole

  # EC2 Instance for Benchmark Client
  BenchmarkClientInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref BenchmarkClientInstanceProfile
      SecurityGroupIds:
        - !GetAtt BenchmarkClientSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y python3 python3-pip git jq
          pip3 install redis pandas matplotlib seaborn numpy jupyter

          # Clone the benchmark repository
          cd /home/ec2-user
          git clone https://github.com/yourusername/elasticache_valkey_redis_compare.git
          chown -R ec2-user:ec2-user elasticache_valkey_redis_compare

          # Create configuration file with ElastiCache endpoints
          mkdir -p /home/ec2-user/elasticache_valkey_redis_compare/config
          cat > /home/ec2-user/elasticache_valkey_redis_compare/config/aws_endpoints.json << 'EOF'
          {
            "redis": {
              "host": "${RedisCluster.PrimaryEndPoint.Address}",
              "port": ${RedisCluster.PrimaryEndPoint.Port}
            },
            "valkey": {
              "host": "${ValkeyCluster.PrimaryEndPoint.Address}",
              "port": ${ValkeyCluster.PrimaryEndPoint.Port}
            }
          }
          EOF
          chown ec2-user:ec2-user /home/ec2-user/elasticache_valkey_redis_compare/config/aws_endpoints.json
      Tags:
        - Key: Name
          Value: benchmark-client

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c7217cdde317cfec  # Amazon Linux 2023 AMI
    us-east-2:
      AMI: ami-05fb0b8c1424f266b
    us-west-1:
      AMI: ami-0ce2cb35386fc22e9
    us-west-2:
      AMI: ami-008fe2fc65df48dac
    eu-west-1:
      AMI: ami-0905a3c97561e0b69
    eu-west-2:
      AMI: ami-0e5f882be1900e43b
    eu-central-1:
      AMI: ami-0faab6bdbac9486fb
    ap-northeast-1:
      AMI: ami-0f903fb156f24adbf
    ap-northeast-2:
      AMI: ami-0f3a440bbcff3d043
    ap-southeast-1:
      AMI: ami-0fa377108253bf620
    ap-southeast-2:
      AMI: ami-04f5097681773b989
    ap-south-1:
      AMI: ami-008b9c9e5a4b6c5fc

Outputs:
  RedisEndpoint:
    Description: Endpoint for the Redis cluster
    Value: !Sub ${RedisCluster.PrimaryEndPoint.Address}:${RedisCluster.PrimaryEndPoint.Port}

  ValkeyEndpoint:
    Description: Endpoint for the Valkey cluster
    Value: !Sub ${ValkeyCluster.PrimaryEndPoint.Address}:${ValkeyCluster.PrimaryEndPoint.Port}

  BenchmarkClientPublicDNS:
    Description: Public DNS name of the benchmark client EC2 instance
    Value: !GetAtt BenchmarkClientInstance.PublicDnsName

  BenchmarkClientPublicIP:
    Description: Public IP address of the benchmark client EC2 instance
    Value: !GetAtt BenchmarkClientInstance.PublicIp

  SSHCommand:
    Description: SSH command to connect to the benchmark client
    Value: !Sub ssh -i ${EC2KeyName}.pem ec2-user@${BenchmarkClientInstance.PublicDnsName}
